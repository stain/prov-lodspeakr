# -*- Mode: cperl; coding: utf-8; cperl-indent-level: 4 -*-
# (c) Copyright Francois Desarmenien 1998-2001, all rights reserved.
# (see COPYRIGHT in Parse::Yapp.pm pod section for use and distribution rights)
#
# Parse/Yapp/Parser.yp: Parse::Yapp::Parser.pm source file
#
# Use: yapp -m 'Parse::Yapp::Parse' -o Parse/Yapp/Parse.pm YappParse.yp
#
# to generate the Parser module.
#

%{
require 5.004;

use Carp;

    use W3C::Util::Exception;
    use W3C::Util::YappDriver;
    use W3C::Grammar::YaccCompileTree qw($PassedTokensName);
    #use W3C::Grammar::LexLexer;
    @ISA= qw (W3C::Util::YappDriver);

my($input,$lexlevel,$nberr,@lineno,$prec,$labelno);
my($head,$tail,$Token,$Terminals,$NonTerminals,$rules,$PrecedenceTerminals,$start,$nullable);
my($expect);
my $NoSemiNeeded = 0;
my $Messages = [];

my $LexMode = 0; # not lexing lex
my $CharClass = undef; # not lexing a character class

%}

%%

# Main rule
yapp:
    head body tail
{   my ($self, $head, $body, $tail) = @_;
    return new W3C::Grammar::YaccCompileTree::Grammar($head, $body, $tail, $self->YYData->{NoIntegrityCheck}, $self);
}
;

#Common rules:

symbol:
    LITERAL
{   my ($self, $literalInfo) = @_;
    my ($literal, $lineNo) = ($literalInfo->getToken(), $literalInfo->getLineNo());
    if (!exists($self->YYData->{Symbols}{$literal})) {
	$self->YYData->{Symbols}{$literal} = $lineNo;
	$Terminals->{$literal} = undef;
    }
    return $literalInfo;
}
    |   ident   #default action
;

ident:
    IDENT
{   my ($self, $idenifierInfo) = @_;
    my ($identifier, $lineNo) = ($idenifierInfo->getToken(), $idenifierInfo->getLineNo());
    if (!exists($self->YYData->{Symbols}{$identifier})) {
	$self->YYData->{Symbols}{$identifier} = $lineNo;
	$Terminals->{$identifier} = undef;
    }
    return $idenifierInfo;
}
;


# Head section:
head:
    headsec '%%'
{   my ($self, $headsec) = @_;
    return $headsec;
}
;

headsec:
    #empty  #default action
{   []}
    | decls   #default action
;

decls:
    decls decl  #default action
{   my ($self, $decls, $decl) = @_;
    return [@$decls, $decl];
}
    | decl        #default action
{   my ($self, $decl) = @_;
    return [$decl];
}
;

CMNTS:
    # empty
{   []}
    | CMNTS COMMENT
{   my ($self, $cmnts, $comment) = @_;
    return [ @$cmnts, $comment ];
}
;

decl:
    '\n'                 #default action
    | COMMENT
#    | WHITESPACE
    | TOKEN typedecl symlist CMNTS '\n'
{   my ($self, $tokenInfo, $typedecl, $symlist, $comments) = @_;
    for (@$symlist) {
	my($symbol, $lineno)=@$_;
	if (exists $Token->{$symbol}) {
	    _SyntaxError(0,
			 "Token $symbol redefined: ".
			 "Previously defined line $self->YYData->{Symbols}{$symbol}",
			 $lineno);
	    next;
	}
	$Token->{$symbol}=$lineno;
	$Terminals->{$symbol} = [ ];
    }
    return new W3C::Grammar::YaccCompileTree::TokenDecl($tokenInfo, $typedecl, $symlist, $comments, $self);
}
    | ASSOC typedecl symlist CMNTS '\n'  
{   my ($self, $assocInfo, $typedecl, $symlist, $comments) = @_;
    for (@$symlist) {
	my($symbol, $lineno)=@$_;
	if (defined $Terminals->{$symbol}[0]) {
	    _SyntaxError(1,
			 "Precedence for symbol $symbol redefined: ".
			 "Previously defined line $self->YYData->{Symbols}{$symbol}",
			 $lineno);
	    next;
	}
	my ($assoc, $lineNoXXX) = @$assocInfo;
	$Token->{$symbol} = $lineno;
	$Terminals->{$symbol} = [ $assoc, $prec ];
    }
    ++$prec;
    return new W3C::Grammar::YaccCompileTree::AssocDecl($assocInfo, $typedecl, $symlist, $comments, $self);
}
    | START ident '\n'
{   my ($self, $startInfo, $identInfo, undef) = @_;
    my ($foo, $bar) = @$identInfo;
    $start=$foo;
    return $identInfo;
}
    | HEADCODE '\n'
{   my ($self, $headcode, undef) = @_;
    push(@$head, $start);
    return $headcode;
}
    | UNION CODE '\n'
{   return undef; #ignore
}
#	decl -> TYPE . typedecl identlist '\n'
#	decl -> TYPE typedecl . identlist '\n'
#	decl -> TYPE typedecl identlist . '\n'
    | TYPE typedecl identlist '\n'
{   my ($self, $type, $typedecl, $identlist, undef) = @_;
    for ( @$identlist ) {
	my($symbol,$lineno)=@$_;
	if (exists $NonTerminals->{$symbol}) {
	    _SyntaxError(0,
			 "Non-terminal $symbol redefined: ".
			 "Previously defined line $self->YYData->{Symbols}{$symbol}",
			 $lineno);
	    next;
	}
	delete $Terminals->{$symbol};   #not a terminal
	$NonTerminals->{$symbol} = undef;    #is a non-terminal
    }
}
    | EXPECT NUMBER '\n'
{   my ($self, $expect, $numberInfo) = @_;
    my ($number, $lineNo) = @$numberInfo;
    $expect=$number;
    return undef;
}
    | error '\n'
{   my ($self, $error, undef) = @_;
    $self->YYErrok;
}
    | '[' ordinal ']' TERMINAL ':' ':' '=' lrhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $ordinal, undef, $identInfo, undef, undef, undef, $rhss, undef, undef) = @_;
    return new W3C::Grammar::YaccCompileTree::LexGoal($identInfo, $rhss, $self);
}
;

typedecl:
    #empty
    | '<' IDENT '>'
;

symlist:
    symlist symbol
{   my ($self, $symlist, $symbol) = @_;
    push(@$symlist,$symbol);
    return $symlist;
}
    | symbol
{   my ($self, $symbol) = @_;
    return [ $symbol ];
}
;

identlist:
#	identlist -> identlist ident .
    identlist ident
{   my ($self, $identlist, $ident) = @_;
    push(@$identlist, $ident);
    return $identlist;
}
#	identlist -> ident .
    | ident
{   my ($self, $ident) = @_;
    return [ $ident ];
}
;

# Lex rules
lrhss:
    lrhss '|' lrule
{   my ($self, $rhss, undef, $rule) = @_;
    return W3C::Grammar::YaccCompileTree::LDisjunction::addRightBranch($rhss, $rule, $self);
}
    | lrule
;

lrule:
    lrhs
{   my ($self, $rhs) = @_;
    my $code = undef;

    if (defined $rhs && 0 &&	# !!! Disabled code
	$rhs->[-1]->isa('W3C::Grammar::YaccCompileTree::Code')) {
	$code = (pop (@$rhs))->getCode();
    }

    return new W3C::Grammar::YaccCompileTree::LRule($rhs, undef, $code, $self);
}
;

lrhs:
    #empty      #default action (will return undef)
    | lrhselts     #default action
;

lrhselts:
    lrhselt
    | lrhselt lrhselts
{   my ($self, $rhselt, $rhselts) = @_;
    return new W3C::Grammar::YaccCompileTree::LSequence($rhselt, $rhselts, $self);
}
;

lrhselt:
    lmodifiedelt
    | code
{   my ($self, $code) = @_;
    return new W3C::Grammar::YaccCompileTree::Code($code, $self);
}
    | COMMENT
;


lmodifiedelt:
    lmodifiableelt
    | lmodifiableelt '*'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Star($elt, $marker, $self);
}
    | lmodifiableelt '?'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Opt($elt, $marker, $self);
}
    | lmodifiableelt '+'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Plus($elt, $marker, $self);
}
;

lmodifiableelt:
    resolvableelt1
#    | '(' lrhsGroup ')'
    | '(' lrhss ')'
{   my ($self, $open, $rhselts, undef) = @_;
    return UNIVERSAL::isa($rhselts, 'W3C::Grammar::YaccCompileTree::Set') ? 
    new W3C::Grammar::YaccCompileTree::LGroup($open, $rhselts, $self) : 
    $rhselts;
}
    | '/' lmodifiableelt
{   my ($self, undef, $lookAhead) = @_;
    return new W3C::Grammar::YaccCompileTree::LookAhead($lookAhead, $self);
}
;

resolvableelt1:
    resolvableelt
    | resolvableelt1 '-' resolvableelt
{   my ($self, $resolvableelt, undef, $lrhselts) = @_;
    $resolvableelt->excludeRange($lrhselts);
    return $resolvableelt;
}
;

resolvableelt:
    LITERAL
{   my ($self, $symbol) = @_;
    return new W3C::Grammar::YaccCompileTree::LSymb($symbol, $self);
}
    | IDENT
{   my ($self, $terminal) = @_;
    return new W3C::Grammar::YaccCompileTree::LSymb($terminal, $self);
}
    | TERMINAL
{   my ($self, $terminal) = @_;
    return new W3C::Grammar::YaccCompileTree::LSymb($terminal, $self);
}
    | '[' { $CharClass = 0; } charclass ']' { $CharClass = undef; }
{   my ($self, undef, undef, $charclass, undef, undef) = @_;
    return $charclass;
}
;

charclass:
    lrangeList
{   my ($self, $lrangeList) = @_;
    return new W3C::Grammar::YaccCompileTree::CharacterClass($lrangeList, 0, $self);
}
    | CARROT lrangeList
{   my ($self, undef, $lrangeList) = @_;
    return new W3C::Grammar::YaccCompileTree::CharacterClass($lrangeList, 1, $self);
}
;

lrhsGroup:
    lrhss '|' lrhs
{   my ($self, $rhss, undef, $rule) = @_;
    return W3C::Grammar::YaccCompileTree::LDisjunction::addRightBranch($rhss, $rule, $self);
}
    | lrhs
;

lrangeList:
    lRange
    | lrangeList  lRange
{   my ($self, $list, $lRange) = @_;
    return new W3C::Grammar::YaccCompileTree::List($list, $lRange, $self);
}
;

lRange:
    lRangeElem
    | lRangeElem RANGEOP lRangeElem
{   my ($self, $list, undef, $lRange) = @_;
    return new W3C::Grammar::YaccCompileTree::Range($list, $lRange, $self);
}
;

lRangeElem:
    LITERAL
{   my ($self, $symbol) = @_;
    return new W3C::Grammar::YaccCompileTree::LSymb($symbol, $self);
}
;

# Rule section
body:
    rulesec TERMINALS termsec '%%'
{   my ($self, $rulesec, undef, $termsec, undef) = @_;
    if (!$start) {
	$start = $rules->[1][0];
    }

    if (ref $NonTerminals->{$start}) {
    } else {
	_SyntaxError(2,"Start symbol $start not found ".
		     "in rules section",$_[2][1]);
	$rules->[0]=[ '$start', [ $start, chr(0) ], undef, undef ];
    }
    return [@$rulesec, @$termsec];
}
    | rulesec '%%'
{   my ($self, $rulesec, undef) = @_;
    if (!$start) {
	$start = $rules->[1][0];
    }

    if (ref $NonTerminals->{$start}) {
    } else {
	_SyntaxError(2,"Start symbol $start not found ".
		     "in rules section",$_[2][1]);
	$rules->[0]=[ '$start', [ $start, chr(0) ], undef, undef ];
    }
    return $rulesec;
}
    | '%%'
{
    _SyntaxError(2,"No rules in input grammar",$_[1][1]);
}
;

rulesec:
    rulesec rules
{   my ($self, $rulesec, $rules) = @_;
    return [ @$rulesec, $rules ];
}
    | rules         #default action
{   my ($self, $rules) = @_;
    return [ $rules ];
}
;

rules:
    ordinalOpt IDENT ruleMarker {$NoSemiNeeded = 1;} rhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $identInfo, undef, undef, $rhss, undef) = @_;
    return new W3C::Grammar::YaccCompileTree::Production($identInfo, $rhss, $self);
}
    | ordinalOpt TERMINAL ruleMarker {$NoSemiNeeded = 1;} termrhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $identInfo, undef, undef, $rhss, undef, undef) = @_; # lrhss
    return new W3C::Grammar::YaccCompileTree::LexGoal($identInfo, $rhss, $self);
}
    | ordinalOpt PASS ruleMarker {$NoSemiNeeded = 1;} termrhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $identInfo, undef, undef, $rhss, undef) = @_;
    $identInfo->setTerminal(1);
    return new W3C::Grammar::YaccCompileTree::Pass($identInfo, $rhss, $self);
}
    | COMMENT
    | error ';'
{   my ($self) = @_;
    $_[0]->YYErrok;
}
;

termsec:
    termsec terms
{   my ($self, $termsec, $terms) = @_;
    return [ @$termsec, $terms ];
}
    | terms         #default action
{   my ($self, $terms) = @_;
    return [ $terms ];
}
;

terms:
    ordinalOpt IDENT ruleMarker {$NoSemiNeeded = 1;} termrhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $identInfo, undef, undef, $rhss, undef) = @_;
    $identInfo->setTerminal(1);
    return new W3C::Grammar::YaccCompileTree::LexGoal($identInfo, $rhss, $self);
}
    | ordinalOpt PASS ruleMarker {$NoSemiNeeded = 1;} termrhss EOProduction {$NoSemiNeeded = 0;}
{   my ($self, undef, $identInfo, undef, undef, $rhss, undef) = @_;
    $identInfo->setTerminal(1);
    return new W3C::Grammar::YaccCompileTree::Pass($identInfo, $rhss, $self);
}
    | COMMENT
    | error ';'
{   my ($self) = @_;
    $_[0]->YYErrok;
}
;

ordinalOpt:
    # empty
    | '[' ordinal ']'
;

ordinal:
    # empty
    | NUMBER
    | NUMBER IDENT
;

ruleMarker:
    ':'
    | ':' ':' '='
;

rhss:
    rhss '|' rule
{   my ($self, $rhss, undef, $rule) = @_;
    return W3C::Grammar::YaccCompileTree::Disjunction::addRightBranch($rhss, $rule, $self);
}
    | rule
;

termrhss:
    termrhss '|' termrule
{   my ($self, $rhss, undef, $rule) = @_;
    return W3C::Grammar::YaccCompileTree::LDisjunction::addRightBranch($rhss, $rule, $self);
}
    | termrule
;

rule:
    rhs prec epscode
{   my ($self, $rhs, $prec, $epscode) = @_;
    return new W3C::Grammar::YaccCompileTree::Rule($rhs, $prec, $epscode, $self);
}
    | rhs
{   my ($self, $rhs) = @_;
    my $code = undef;

    if (defined $rhs && 0 &&	# !!! Disabled code
	$rhs->[-1]->isa('W3C::Grammar::YaccCompileTree::Code')) {
	$code = (pop (@$rhs))->getCode();
    }

    return UNIVERSAL::isa($rhs, 'W3C::Grammar::YaccCompileTree::Set') ? 
      new W3C::Grammar::YaccCompileTree::Rule($rhs, undef, $code, $self) : 
	$rhs;
}
;

termrule:
    termrhs prec epscode
{   my ($self, $rhs, $prec, $epscode) = @_;
    return new W3C::Grammar::YaccCompileTree::Rule($rhs, $prec, $epscode, $self);
}
    | termrhs
{   my ($self, $rhs) = @_;
    my $code = undef;

    if (defined $rhs && 0 &&	# !!! Disabled code
	$rhs->[-1]->isa('W3C::Grammar::YaccCompileTree::Code')) {
	$code = (pop (@$rhs))->getCode();
    }

    return new W3C::Grammar::YaccCompileTree::Rule($rhs, undef, $code, $self);
}
;

rhs:
    #empty      #default action (will return undef)
    | rhselts     #default action
;

termrhs:
    #empty      #default action (will return undef)
    | termrhselts     #default action
;

rhselts:
    rhselt rhselts
{   my ($self, $rhselt, $rhselts) = @_;
    return new W3C::Grammar::YaccCompileTree::Sequence($rhselt, $rhselts, $self);
}
    | rhselt
;

termrhselts:
    termrhselt termrhselts
{   my ($self, $rhselt, $rhselts) = @_;
    return new W3C::Grammar::YaccCompileTree::Sequence($rhselt, $rhselts, $self);
}
    | termrhselt
;

rhselt:
    modifiedelt
    | code
{   my ($self, $code) = @_;
    return new W3C::Grammar::YaccCompileTree::Code($code, $self);
}
    | COMMENT
;

termrhselt:
    termmodifiedelt
    | COMMENT
;

modifiedelt:
    modifiableelt
    | modifiableelt '*'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Star($elt, $marker, $self);
}
    | modifiableelt '?'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Opt($elt, $marker, $self);
}
    | modifiableelt '+'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Plus($elt, $marker, $self);
}
;

termmodifiedelt:
    lmodifiableelt
    | lmodifiableelt '*'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Star($elt, $marker, $self);
}
    | lmodifiableelt '?'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Opt($elt, $marker, $self);
}
    | lmodifiableelt '+'
{   my ($self, $elt, $marker) = @_;
    return new W3C::Grammar::YaccCompileTree::Plus($elt, $marker, $self);
}
;

modifiableelt:
    symbol
{   my ($self, $symbol) = @_;
    return new W3C::Grammar::YaccCompileTree::Symb($symbol, $self);
}
    | TERMINAL
{   my ($self, $terminal) = @_;
    return new W3C::Grammar::YaccCompileTree::Symb($terminal, $self);
}
    | '(' rhss ')'
{   my ($self, $open, $rhselts, undef) = @_;
    return UNIVERSAL::isa($rhselts, 'W3C::Grammar::YaccCompileTree::Set') ? 
    new W3C::Grammar::YaccCompileTree::Group($open, $rhselts, $self) : 
    $rhselts;
}
    | '[' { $CharClass = 0; } charclass ']' { $CharClass = undef; }
{   my ($self, $bracket, undef, $charclass, undef, undef) = @_;
    my $charclassStr = $charclass->toString();
    _SyntaxError(1, "character classes must only appear in a terminal (found $charclassStr)",
		 $bracket->getLineNo());
    return $charclass;
}
    | '/' lmodifiableelt
{   my ($self, $slash, $lookAhead) = @_;
    my $lookAheadStr = $lookAhead->toString();
    _SyntaxError(1, "lookahead must only appear in a terminal (found $lookAheadStr)",
		 $slash->getLineNo());
    return new W3C::Grammar::YaccCompileTree::LookAhead($lookAhead, $self);
}
;

prec:
    PREC symbol
{   my ($self, $prec, $symbol) = @_;
    if (!defined $Terminals->{$_[2][0]}) {
	_SyntaxError(1,"No precedence for symbol $_[2][0]",
		     $_[2][1]);
	return undef;
    }

    ++$$PrecedenceTerminals{$_[2][0]};
    $Terminals->{$_[2][0]}[1];
}
;

epscode:
{   return undef;
}
    | code
{   my ($self, $code) = @_;
    return $code;
}
;

code:
    CODE
{   my ($self, $code) = @_;
    return $code;
}
;

# Tail section:

tail:       /*empty*/
    | TAILCODE
{   my ($self, $tailcode) = @_;
    return $tail = $tailcode;
}
;


%%
sub _Error {
    my ($self, @parms) = @_;
    my($value)=$self->YYCurval;

    $self->YYData->{INPUT} = $$input;
    $self->YYData->{my_LASTPOS} = pos $$input;
    &throw(new W3C::Util::YappDriver::MesgYappContextException($self, @parms));
    my($what)= $Token ? "input: '$$value[0]'" : "end of input";

    _SyntaxError(1,"Unexpected $what",$$value[1]);
}

use constant SEC_head => 0;
use constant SEC_body => 1;
use constant SEC_tail => 2;

sub _Lexer {
    my ($self) = @_;

    if ($self->YYData->{Fake} eq 'bodyTransition') {
	$self->YYData->{Fake} = 'tailTransition';
        ++$lexlevel;
        return('%%', [ '%%', $lineno[0] ]);
    }

    #At EOF
    if (pos($$input) >= length($$input)) {
	if ($NoSemiNeeded) {
	    $NoSemiNeeded = 0;
	    return ('EOProduction', 'EOProduction')
	}
	if ($self->YYData->{Fake} eq 'tailTransition') {
	    $self->YYData->{Fake} = '';
	    ++$lexlevel;
	    return('%%', [ '%%', $lineno[0] ]);
	}

	return('',[ undef, -1 ]);
    }

    #In Character Class
    if (defined $CharClass) {
	my $ret;
	if ($CharClass == 0 && $$input =~ m/\G(\^)/gc) {
	    $ret = ['CARROT' , new W3C::Grammar::YaccCompileTree::LLITERAL($1, $lineno[0], $self)];
	} elsif ($$input =~ m/\G\#x([0-9A-Fa-f]+)/gc) {
	    my $char = chr(hex($1));
	    $ret = ['LITERAL' , new W3C::Grammar::YaccCompileTree::LLITERAL($char, $lineno[0], $self)];
	} elsif ($$input =~ m/\G(\\.)/gc) {
	    my $str = $1;
	$str =~ s/\\\\/\\/g;
	$str =~ s/\\\"/\"/g;
	$str =~ s/\\r/\r/g;
	$str =~ s/\\n/\n/g;
	$str =~ s/\\t/\t/g;
	    $ret = ['LITERAL' , new W3C::Grammar::YaccCompileTree::LLITERAL($str, $lineno[0], $self)];
	} elsif ($$input =~ m/\G(\-)(?!\])/gc) {
	    my $char = $1;
	    $ret = ['RANGEOP' , new W3C::Grammar::YaccCompileTree::TOKEN($char, $lineno[0], $self)];
	} elsif ($$input =~ m/\G(\])/gc) {
	    my $char = $1;
	    $ret = [']' , new W3C::Grammar::YaccCompileTree::TOKEN($char, $lineno[0], $self)];
	} elsif ($$input =~ m/\G(.)/gc) {
	    my $char = $1;
	    $ret = ['LITERAL' , new W3C::Grammar::YaccCompileTree::LLITERAL($char, $lineno[0], $self)];
	} else {
	    $self->_Error(-errorMessage => "unexpected end of input in character class");
	}
	$CharClass++;
	return @$ret;
    }

    #In a LEX decl
    if ($LexMode) {
	$$input =~ m/\G\s*/gc;
	return _LexLexer($input, undef);
    }

    #In TAIL section
    if ($lexlevel > SEC_body) {
        my($pos)=pos($$input);

        $lineno[0]=$lineno[1];
        $lineno[1]=-1;
        pos($$input)=length($$input);
        return('TAILCODE', new W3C::Grammar::YaccCompileTree::TAILCODE(substr($$input, $pos), $lineno[0], $self));
    }

    # Handle COMMENTs and whitespace.
    if ($NoSemiNeeded && ($lexlevel == SEC_head || $lexlevel == SEC_body) && $$input=~m{
\G(\s+) (?= ((?:\[\d \s* [\d\w]*\]|/\*|\#(?![xX]?[0-9a-fA-F])))	# needs to include line feed in consumed \s+
        | (?: (?: [A-Za-z_][A-Za-z0-9_]* )
              | \< (?:[^\>]+) \>) \s*\:
        | (?: %% )
        | (?: \Z )
        | (?= \@ ) )}xsgc) {
        my ($blanks) = ($1);
        $lineno[1]+= $blanks=~tr/\n//;
	$lineno[0]=$lineno[1];
	return('EOProduction', 'EOProduction');
    } elsif ($$input=~m{\G((\s*)\#((?:[^x])[^\n]*))}xsgc) {
	my ($blanks, $leadWS, $text) = ($1, $2, $3);
        $lineno[1]+= $blanks=~tr/\n//;
	$lineno[0]=$lineno[1];
	return ('COMMENT', new W3C::Grammar::YaccCompileTree::PerlComment($leadWS, $text, $lineno[0], $self));
    } elsif ($$input=~m{\G((\s*)/\*(.*?)\*/)}xsgc) {
	my ($blanks, $leadWS, $text) = ($1, $2, $3);
        $lineno[1]+= $blanks=~tr/\n//;
	$lineno[0]=$lineno[1];
	return ('COMMENT', new W3C::Grammar::YaccCompileTree::CComment($leadWS, $text, $lineno[0], $self));
    } elsif ($lexlevel == SEC_head && $$input=~m{\G([\t\ ]+)}xsgc || 
	     ($lexlevel != SEC_head || $NoSemiNeeded) && $$input=~m{\G(\s+)}xsgc) {
        my ($blanks) = ($1);
        $lineno[1]+= $blanks=~tr/\n//;

        #Maybe now at EOF
    if (pos($$input) >= length($$input)) {
	if ($NoSemiNeeded) {
	    $NoSemiNeeded = 0;
	    return ('EOProduction', 'EOProduction')
	}
	if ($self->YYData->{Fake} eq 'tailTransition') {
	    $self->YYData->{Fake} = '';
	    ++$lexlevel;
	    return('%%', [ '%%', $lineno[0] ]);
	}

	return('',[ undef, -1 ]);
    }
    }

    $lineno[0]=$lineno[1];

    if ($$input=~/\G\@terminals/gc) {
	return('TERMINALS', new W3C::Grammar::YaccCompileTree::IDENT('', $lineno[0], $self));
    }

    if ($$input=~/\G\@pass/gc) {
	return('PASS', new W3C::Grammar::YaccCompileTree::IDENT($PassedTokensName, $lineno[0], $self));
    }

    if ($$input=~/\G([A-Za-z_][A-Za-z0-9_]*)/gc) {
	my $name = $1;
	my $ident = $self->YYData->{KnownIdents}{$name};
	if (!$ident) {
	    $ident = new W3C::Grammar::YaccCompileTree::IDENT($name, $lineno[0], $self);
	    $self->YYData->{KnownIdents}{$name} = $ident;
	}
	return('IDENT', $ident);
    }

    if ($$input=~/\G\'((?:[^\'\\]|\\\\|\\\'|\\)+?)\'/gc) {
	if ($1 eq "'error'") {
            _SyntaxError(0,"Literal 'error' ".
			 "will be treated as error token",$lineno[0]);
            return('IDENT', new W3C::Grammar::YaccCompileTree::IDENT('error', $lineno[0], $self));
        }
	my $str = $1;
	$str =~ s/\\\\/\\/g;
	$str =~ s/\\\"/\"/g; # @@@ forgiving mode
	$str =~ s/\\\'/\'/g;
	$str =~ s/\\r/\r/g; # @@@ forgiving mode
	$str =~ s/\\n/\n/g; # @@@ forgiving mode
	$str =~ s/\\t/\t/g; # @@@ forgiving mode
        return('LITERAL', new W3C::Grammar::YaccCompileTree::LLITERAL($str, $lineno[0], $self));
    }

    if ($$input=~/\G\#x([0-9A-Fa-f]+)/gc) {
	my $ch = chr(hex($1));
        return('LITERAL', new W3C::Grammar::YaccCompileTree::LLITERAL($ch, $lineno[0], $self));
    }

    if ($$input=~/\G\"((?:[^\\\"]|(?:\\.))*)\"/gc) {
	if ($1 eq "'error'") {
            _SyntaxError(0,"Literal 'error' ".
			 "will be treated as error token",$lineno[0]);
            return('IDENT', new W3C::Grammar::YaccCompileTree::IDENT('error', $lineno[0], $self));
        }
	my $str = $1;
	$str =~ s/\\\\/\\/g;
	$str =~ s/\\\"/\"/g;
	$str =~ s/\\\'/\'/g; # @@@ forgiving mode
	$str =~ s/\\r/\r/g;
	$str =~ s/\\n/\n/g;
	$str =~ s/\\t/\t/g;
        return('LITERAL', new W3C::Grammar::YaccCompileTree::LLITERAL($str, $lineno[0], $self));
    }

    if ($$input=~/\G\<([^\>]+)\>/gc) {
	my $value = $1;
	if ($value =~ m/\"/) {
	    my $pieces = [];
	    while ($value =~ /\G\"((?:[^\\\"]|(?:\\.))*)\"\s*/gc) {
		my $str = $1;
		$str =~ s/\\\\/\\/g;
		$str =~ s/\\\"/\"/g;
		$str =~ s/\\r/\r/g;
		$str =~ s/\\n/\n/g;
		$str =~ s/\\t/\t/g;
		push (@$pieces, $str);
	    }
	    my $all = join(' ', @$pieces);
	    return('LITERAL', new W3C::Grammar::YaccCompileTree::LLITERAL($all, $lineno[0], $self));
	} elsif ($value eq "'error'") {
            _SyntaxError(0,"Literal 'error' ".
			 "will be treated as error token",$lineno[0]);
            return('IDENT', new W3C::Grammar::YaccCompileTree::IDENT('error', $lineno[0], $self));
        } else {
	    return('TERMINAL', new W3C::Grammar::YaccCompileTree::Terminal($value, $lineno[0], $self));
	}
    }

    if ($$input=~/\G(%%)/gc) {
        ++$lexlevel;
        return($1, [ $1, $lineno[0] ]);
    }

    if ($$input=~/\G{/gc) {
        my($level,$from,$code);

        $from=pos($$input);

        $level=1;
        while($$input=~/([{}])/gc) {
	    if (substr($$input,pos($$input)-1,1) eq '\\') { #Quoted
		next;
	    }
	    if ($level += ($1 eq '{' ? 1 : -1)) {
	    } else {
		last;
	    }
        }
	if ($level) {
	    _SyntaxError(2,"Unmatched { opened line $lineno[0]",-1);
	}
        $code = substr($$input,$from,pos($$input)-$from-1);
        $lineno[1]+= $code=~tr/\n//;
        return('CODE', new W3C::Grammar::YaccCompileTree::CODE($code, $lineno[0], $self));
    }

    if ($lexlevel == SEC_head) { # In head section
	if ($$input=~/\G%(left|right|nonassoc)/gc) {
	    return('ASSOC', new W3C::Grammar::YaccCompileTree::ASSOC($1, $lineno[0], $self));
	}
	if ($$input=~/\G%(start)/gc) {
	    return('START', new W3C::Grammar::YaccCompileTree::START(undef, $lineno[0], $self));
	}
	if ($$input=~/\G%(expect)/gc) {
	    return('EXPECT', new W3C::Grammar::YaccCompileTree::EXPECT(undef, $lineno[0], $self));
	}
	if ($$input=~/\G%{/gc) {
	    my($code);

	    if ($$input !~ /\G(.*?)%\}/sgc) {
		_SyntaxError(2,"Unmatched %{ opened line $lineno[0]",-1);
	    }

	    $code=$1;
	    $lineno[1]+= $code=~tr/\n//;
	    return('HEADCODE', new W3C::Grammar::YaccCompileTree::HEADCODE($code, $lineno[0], $self));
	}
	if ($$input=~/\G%(token)/gc) {
	    return('TOKEN', new W3C::Grammar::YaccCompileTree::TOKEN(undef, $lineno[0], $self));
	}
	if ($$input=~/\G%(type)/gc) {
	    return('TYPE', new W3C::Grammar::YaccCompileTree::TYPE(undef, $lineno[0], $self));
	}
	if ($$input=~/\G%(union)/gc) {
	    return('UNION', new W3C::Grammar::YaccCompileTree::UNION(undef, $lineno[0], $self));
	}
	if ($$input=~/\G([0-9]+)/gc) {
	    return('NUMBER', new W3C::Grammar::YaccCompileTree::NUMBER($1, $lineno[0], $self));
	}
    } else {		# In rule section
	if ($$input=~/\G%(prec)/gc) {
	    return('PREC', new W3C::Grammar::YaccCompileTree::PREC(undef, $lineno[0], $self));
	}
	if ($$input=~/\G([0-9]+)/gc) { # added
	    return('NUMBER', new W3C::Grammar::YaccCompileTree::NUMBER($1, $lineno[0], $self));
	}
    }

    #Always return something
    if ($$input !~ /\G(.)/sg) {
	$self->_Error(-errorMessage => "matched no characters")
    }
    my $char = $1;

    if ($NoSemiNeeded && $char eq ';') {
	$NoSemiNeeded = 0;
	return('EOProduction', 'EOProduction');
    }

    if ($char eq "\n") {
	++$lineno[1];
    }

    return ( $char , new W3C::Grammar::YaccCompileTree::TokenBase($char, $lineno[0], $self));

}

sub _SyntaxError {
    my($level,$message,$lineno)=@_;

    $message= "*".
#              [ 'Warning', 'Error', 'Fatal' ]->[$level].
              "* $message, at ".
              ($lineno < 0 ? "eof" : "line $lineno").
              ".\n";

    if ($level > 1) {
	my $messagesStr = &getMessages();
	die "$messagesStr\n*Fatal* $message";
    }

    push (@$Messages, [$level, $message]);

    if ($level > 0) {
	++$nberr;
    }

    if ($nberr == 20) {
	my $messagesStr = &getMessages();
	die "$messagesStr\n*Fatal* Too many errors detected.";
    }
}
sub getLineNo {
    return $lineno[0];
}
sub getMessages {
    return join('', map {($_->[0] ? 'Error' : 'Warning').": $_->[1]"} @$Messages);
}
sub W3C::Grammar::YaccCompileTree::IDENT::_getProductionByName {
    my ($self) = @_;
    my $lhs = $self->getToken();
    return $NonTerminals->{$lhs};
}

sub _AddRules {
    my($self, $production) = @_;
    my $lhs = $production->getIdent()->getToken();
    my $lineno = $production->getIdent()->getLineNo();
    my $rhss = (); # $production->getRules();
    push(@$rules,[ $lhs, [ ], undef, undef ]);

    if (ref($NonTerminals->{$lhs})) {
	my $pref = $self->YYData->{Symbols}{$lhs};
        _SyntaxError(1,"Non-terminal $lhs redefined: ".
                       "Previously declared line $pref",$lineno);
        return;
    }

    if (ref($Terminals->{$lhs})) {
        my($where) = exists($Token->{$lhs}) ? $Token->{$lhs} : $self->YYData->{Symbols}{$lhs};
        _SyntaxError(1,"Non-terminal $lhs previously ".
		     "declared as token line $where",$lineno);
        return;
    }

    if (ref($NonTerminals->{$lhs})) {      #declared through %type
    } else {
	$self->YYData->{Symbols}{$lhs} = $lineno;   #Say it's declared here
	delete($Terminals->{$lhs});   #No more a terminal
    }
    $NonTerminals->{$lhs} = [];       #It's a non-terminal now

    my($epsrules)=0;        #To issue a warning if more than one epsilon rule

    for my $rhs1 (@$rhss) {
	my $rhs = $rhs1->getRhs();
	my $prec = $rhs1->getPrec();
	my $code = $rhs1->getCode();
        my($tmprule)=[ $lhs, [ ], $prec, $code ]; #Init rule

	if (!@$rhs) {
            ++$$nullable{$lhs};
            ++$epsrules;
        }

        for (my $i = 0; $i < @$rhs; $i++) {
	    my $ob = $rhs->[$i];
	    if (!$ob->isa('W3C::Grammar::YaccCompileTree::Text')) {
		if ($ob->isa('W3C::Grammar::YaccCompileTree::Code')) {
		    my($name)='@'.++$labelno."-$i";
		    push(@$rules,[ $name, [], undef, $ob ]);
		    push(@{$$tmprule[1]},$name);
		    next;
		}
		my $value = $ob->getValue();
		push(@{$$tmprule[1]},$$value[0]);
	    }
        }
        push(@$rules,$tmprule);
        push(@{$NonTerminals->{$lhs}},$#$rules);
    }

    if ($epsrules > 1) {
	_SyntaxError(0,"More than one empty rule for symbol $lhs",$lineno);
    }
    return $production;
}

sub Parse {
    my ($self, $inputParm, $debug) = @_;

    my($parsed)={};

    $input=\$inputParm;

    $lexlevel = SEC_head;
    @lineno=(1,1);
    $nberr=0;
    $prec=0;
    $labelno=0;

    $head=();
    $tail="";

    $self->YYData->{Symbols} = {};
    $self->YYData->{KnownIdents} = {};
    $Token={};
    $Terminals={};
    $NonTerminals={};
    $rules=[ undef ];   #reserve slot 0 for start rule
    $PrecedenceTerminals={};

    $start="";
    $nullable={};
    $expect=0;

    pos($$input)=0;

    $/ = undef;
    my $ret = $self->YYParse(yylex => \&_Lexer, yyerror => \&_Error, yydebug => $debug);

    if ($nberr) {
	_SyntaxError(2,"Errors detected: No output",-1);
    }

    @$parsed{ 'HEAD', 'TAIL', 'RULES', 'NTERM', 'TERM',
              'NULL', 'PREC', 'SYMS',  'START', 'EXPECT' }
    =       (  $head,  $tail,  $rules,  $NonTerminals,  $Terminals,
               $nullable, $PrecedenceTerminals, $self->YYData->{Symbols}, $start, $expect);
    my $messages = [@$Messages];
    $Messages = [];
    undef($input);
    undef($lexlevel);
    undef(@lineno);
    undef($nberr);
    undef($prec);
    undef($labelno);

    undef($head);
    undef($tail);

    #undef($self->YYData->{Symbols});
    undef($Token);
    undef($Terminals);
    undef($NonTerminals);
    undef($rules);
    undef($PrecedenceTerminals);

    undef($start);
    undef($nullable);
    undef($expect);

    return ($ret, $messages);
    $parsed;
}

package W3C::Grammar::YaccParser;
@W3C::Grammar::YaccParser::ISA = 'W3C::Grammar::_YaccParser';

sub new {
    my ($proto, $noIntegrityCheck, @yappParms) = @_;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@yappParms);
    $self->YYData->{NoIntegrityCheck} = $noIntegrityCheck;
    $self->YYData->{Fake} = '';
    return $self;
}

sub fake {
    my ($self, $fake) =@_;
    $self->YYData->{Fake} = $fake;
}

sub setFilename {
    my ($self, $filename) = @_;
    $self->{Filename} = $filename;
}

sub getFilename {
    my ($self) = @_;
    return $self->{Filename};
}

